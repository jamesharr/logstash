# Infoblox DHCP messages
if [type] == "syslog" and [message] =~ /^dhcpd\[\d+\]: DHCP[^ ]+/ {
  mutate {
    add_tag => [ "dhcp" ]
    remove_tag => "_unparsed"
  }
  grok {
    match => { "message" => "(?<dhcp_type>DHCP[^ ]+) " }
  }
  grok {
    # 'DHCPACK on IP', 'DHCPREQUEST for IP', 'DHCPINFORM from IP'
    match => { "message" => "(on|for|from) %{IP:[dhcp][ip]}" }
    tag_on_failure => []
  }
  grok {
    # 'DHCPACK on X to MAC', 'DHCPREQUEST for IP from MAC'
    match => { "message" => "(to|from) %{COMMONMAC:[dhcp][mac]}" }
    tag_on_failure => []
  }

  grok {
    # 'DHCPACK to IP (M:A:C)' [rare]
    match => { "message" => "to %{IP:[dhcp][ip]} \(%{COMMONMAC:[dhcp][mac]}\)" }
    tag_on_failure => []
  }

  grok {
    # 'M:A:C (HOSTNAME) via '
    # MAC is needed to prevent a double-match on 'DHCPACK to IP (MAC) via X'.
    match => { "message" => "%{COMMONMAC} \((?<dhcp_hostname>[^)]*)\) via " }
    tag_on_failure => []
  }

  grok {
    # 'via ethX relay IP_OF_RELAY'
    match => { "message" => "via ([^ ]+) relay %{IP:[dhcp][relay]}" }
    tag_on_failure => []
  }

  grok {
    # 'via IP_OF_RELAY'
    match => { "message" => "via %{IP:[dhcp][relay]}" }
    tag_on_failure => []
  }

  grok {
    # 'lease-duration 1234'
    match => { "message" => "lease-duration %{NONNEGINT:[dhcp][lease-duration]}" }
    tag_on_failure => []
  }

  mutate {
    rename => {
      'dhcp_type' => '[dhcp][type]'
      'dhcp_hostname' => '[dhcp][hostname]'
    }
  }
}
