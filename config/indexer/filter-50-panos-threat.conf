if [type] == "syslog" and [message] =~ /,THREAT,/ {
  mutate {
    add_tag => [ "panos", "panos-threat" ]
    remove_tag => "_unparsed"
  }
  csv {
    columns => [
      "FUTURE_USE",
      "pan_time_recv",
      "pan_serial_no",
      "pan_type",
      "pan_subtype",
      "FUTURE_USE",
      "pan_time_generate",
      "pan_src_ip",
      "pan_dst_ip",
      "pan_nat_src_ip",
      "pan_nat_dst_ip",
      "pan_rule",
      "pan_src_user",
      "pan_dst_user",
      "pan_app",
      "pan_vsys",
      "pan_src_zone",
      "pan_dst_zone",
      "pan_ingress_iface",
      "pan_egress_iface",
      "pan_log_forward_profile",
      "FUTURE_USE",
      "pan_session_id",
      "pan_repeat_count",
      "pan_src_port",
      "pan_dst_port",
      "pan_nat_src_port",
      "pan_nat_dst_port",
      "pan_flags",
      "pan_protocol",
      "pan_action",
      "pan_misc",
      "pan_threat",
      "pan_category",
      "pan_severity",
      "pan_direction",
      "pan_seqno",
      "pan_action_flags",
      "pan_src_location",
      "pan_dst_location",
      "FUTURE_USE",
      "pan_content_type" ]

    grok {
      # Parse pan_misc
      match => {
        "pan_threat" => "%{GREEDYDATA:pan_threatname}\(%{INT:pan_threatid}\)"
      }
      remove_field => [ "pan_threat" ]
      tag_on_failure => [ "_grokparsefailure" ]
    }

    mutate {
      # Cleanup unused fields
      remove_field => [ "FUTURE_USE" ]
    }
  }
}
